#!/bin/bash
# Copyright Â© 2019 Ouyang Xiongyi. All Rights Reserved.

SOURCE_PATH="~/.awesome_devops/plugins/xfinder/xfinder.source"

### find

IGNORE_FILE="-name \".repo\" -prune -o -name \".git\" -prune"

function _xfind()
{
	find . $IGNORE_FILE -o -name "*$@*"
}

function _xfindi()
{
	find . $IGNORE_FILE -o -iname "*$@*"
}

find_ed() {
	gawk --re-interval -v cmd="$*" -v me="$SOURCE_PATH" '
	BEGIN {
		system("clear")
		cmd2 = sprintf("bash -c \"source %s; %s\"", me, cmd)
		while ((cmd2 | getline) > 0) {
			lines[++i] = $0
			printf("[%s] %s\n", i, $0)
		}

		if (i == 0)
			exit

		printf("goto: ")
	}

	{
		num = $1
		if (num > i || num < 1)
			exit

		system(sprintf("vim %s", lines[num]))

		system("clear")
		for (j = 1; j <= i; ++j) {
			printf("[%d] %s\n", j, lines[j])
		}
		printf("goto: ")
	}
	' -
}

alias xfind="find_ed _xfind"
alias xfindi="find_ed _xfindi"

### grep

FIND='find . -regextype posix-egrep'
C_FILE_PAT=".*\.(c|cc|cpp|h)"
OTHER_SRC_FILE_PAT=".*\.(g|lua|java|xml|S|patch|diff|log|txt)"
PY_FILE_PAT=".*\.(py)"
MAKE_FILE_PAT="(.*/(Makefile|meson\.build|makefile|CMakeLists\.txt)|.*\.(mk))"
TAGS_FILE_PAT=".*/(tags-e|tags|cscope.out|ncscope.out)"
SHELL_FILE_PAT_INVERT="$C_FILE_PAT|$MAKE_FILE_PAT|$OTHER_SRC_FILE_PAT|$TAGS_FILE_PAT|$PY_FILE_PAT|.*\.(rst|md)"

grep_ed() {
	# EXAMPLE:
	# "./b:7:xgrep a" := [35m[K./b[m[K[36m[K:[m[K[32m[K7[m[K[36m[K:[m[Kxgrep [01;31m[Ka[m[K

	CMD="$1"
	shift

	CMD=$CMD" \\\\\"$*\\\\\""

	gawk --re-interval -v cmd="$CMD" -v me="$SOURCE_PATH" '
	BEGIN {
		system("clear")
		cmd2 = sprintf("bash -c \"source %s; %s\"", me, cmd)
		while ((cmd2 | getline) > 0) {
			if ($1 == "Binary" && $2 == "file")
				continue
			lines[++i] = $0
			printf("[%s] %s\n", i, $0)
		}

		if (i == 0)
			exit

		printf("goto: ")
	}

	{
		num = $1
		if (num > i || num < 1)
			exit

		file = gensub(/^.{8}([^\033]+).{29}([0-9]+).*/, "\\1", "g", lines[num])
		row = gensub(/^.{8}([^\033]+).{29}([0-9]+).*/, "\\2", "g", lines[num])

		system(sprintf("vim +%s %s", row, file))

		system("clear")
		for (j = 1; j <= i; ++j) {
			printf("[%d] %s\n", j, lines[j])
		}
		printf("goto: ")
	}
	' -
}

grep_fact() {
	while [ -n "$1" ]; do
		local _suffix=$1
		eval "alias $1grep=\"grep_ed _$1grep\""
		eval "alias $1grepi=\"grep_ed _$1grepi\""
		shift
	done
}

function _xgrep() {
	$FIND $IGNORE_FILE -o -type f -name "*" -print0 | xargs -0 grep -H --color=always -n "$@" 2>/dev/null
}

function _xgrepi() {
	$FIND $IGNORE_FILE -o -type f -name "*" -print0 | xargs -0 grep -H -i --color=always -n "$@" 2>/dev/null
}

function _cgrep()
{
	$FIND $IGNORE_FILE -o -type f -iregex "$C_FILE_PAT" -print0 | xargs -0 grep -H --color=always -n "$@" 2>/dev/null
}

function _cgrepi()
{
	$FIND $IGNORE_FILE -o -type f -iregex "$C_FILE_PAT" -print0 | xargs -0 grep -H -i --color=always -n "$@" 2>/dev/null
}

function _sgrep()
{
	$FIND $IGNORE_FILE -o -type f ! -iregex "$SHELL_FILE_PAT_INVERT" -print0 | xargs -0 grep -H --color=always -n "$@" 2>/dev/null
}

function _sgrepi()
{
	$FIND $IGNORE_FILE -o -type f ! -iregex "$SHELL_FILE_PAT_INVERT" -print0 | xargs -0 grep -H -i --color=always -n "$@" 2>/dev/null
}

function _mgrep()
{
	$FIND $IGNORE_FILE -o  -type f -iregex "$MAKE_FILE_PAT" -print0 | xargs -0 grep -H --color=always -n "$@" 2>/dev/null
}

function _mgrepi()
{
	$FIND $IGNORE_FILE -o  -type f -iregex "$MAKE_FILE_PAT" -print0 | xargs -0 grep -H -i --color=always -n "$@" 2>/dev/null
}

function _ogrep()
{
	$FIND $IGNORE_FILE -o  -type f -iregex "$OTHER_SRC_FILE_PAT" -print0 | xargs -0 grep -H --color=always -n "$@" 2>/dev/null
}

function _ogrepi()
{
	$FIND $IGNORE_FILE -o  -type f -iregex "$OTHER_SRC_FILE_PAT" -print0 | xargs -0 grep -H -i --color=always -n "$@" 2>/dev/null
}

function _pgrep()
{
	$FIND $IGNORE_FILE -o  -type f -iregex "$PY_FILE_PAT" -print0 | xargs -0 grep -H --color=always -n "$@" 2>/dev/null
}

function _pgrepi()
{
	$FIND $IGNORE_FILE -o  -type f -iregex "$PY_FILE_PAT" -print0 | xargs -0 grep -H -i --color=always -n "$@" 2>/dev/null
}

grep_fact c o m s x p
